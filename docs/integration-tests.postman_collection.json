{
	"info": {
		"_postman_id": "80745346-aaa6-4cff-b0dd-137edb46a5f3",
		"name": "integration-tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26720283",
		"_collection_link": "https://web.postman.co/workspace/ASE-project-ladygatcha~9f0fd141-4312-4348-9e57-9e529572e41c/collection/26720283-80745346-aaa6-4cff-b0dd-137edb46a5f3?action=share&source=collection_link&creator=26720283"
	},
	"item": [
		{
			"name": "admin-gateway",
			"item": [
				{
					"name": "login - adminuser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Save access token to variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"admin_token\", jsonData.access_token);",
									"});",
									"",
									"pm.test(\"Save access token to variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"token\", jsonData.access_token);",
									"});",
									"",
									"pm.test(\"Save identity token to variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"identity_token\", jsonData.id_token);",
									"});",
									"",
									"pm.test(\"Save user_id token to variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"user_id\", jsonData.userID);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"adminuser\",\n    \"password\": \"password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{GATEWAY_URL}}/auth/login",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// Test the response body structure",
									"pm.test(\"JSON response says that the gateway is running\", function () {",
									"    // Parse the response JSON",
									"    var jsonData = pm.response.json();",
									"    ",
									"    // Check that the response matches the expected object",
									"    pm.expect(jsonData).to.eql({\"message\": \"API Gateway is running\"});",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ADMIN_GATEWAY_URL}}/",
							"host": [
								"{{ADMIN_GATEWAY_URL}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "/market/checkconnection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ADMIN_GATEWAY_URL}}/market/checkconnection",
							"host": [
								"{{ADMIN_GATEWAY_URL}}"
							],
							"path": [
								"market",
								"checkconnection"
							]
						},
						"description": "We should be able to access all the public enpoints from the admin gateway."
					},
					"response": []
				}
			]
		},
		{
			"name": "gatcha microservice",
			"item": [
				{
					"name": "add gatcha comune",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// Store the _id from the response inside an environment variable \"gatcha_id\"",
									"pm.environment.set(\"gatcha_id\", pm.response.json().data._id);",
									"",
									"",
									"// Now we have to check if we can correctly download the image we just uploaded ",
									"// (it has been uploaded to a MinIO bucket)",
									"",
									"// Extracting the image URL from the response",
									"const imageURL = pm.response.json().data.image;",
									"pm.test('Check if response image URL is valid', function () {",
									"    pm.expect(pm.response.json().data.image).to.be.a('string').and.to.not.be.empty;",
									"});",
									"",
									"pm.environment.set(\"imageURL\", imageURL);",
									"",
									"const completeImageURL = pm.environment.get(\"GATEWAY_URL\") + imageURL;",
									"",
									"console.log(\"You can check the content of the image at: \" + completeImageURL);",
									"",
									"// Sending a request to the image URL to check if it is appropriate",
									"pm.sendRequest({",
									"    url: completeImageURL,",
									"    method: 'GET',",
									"}, function (err, res) {",
									"    pm.test('Image request is successful', function () {",
									"        pm.expect(res).to.have.status(200);",
									"    });",
									"    pm.test('Image content type is valid', function () {",
									"        pm.expect(res.headers.get('Content-Type')).to.include('image');",
									"    });",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "postman-cloud:///1efa9f59-fd03-49c0-a6cb-30fe484b839c"
								},
								{
									"key": "json",
									"value": "{\n    \"name\": \"Common Warrior\",\n    \"rarity\": \"comune\"\n}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{ADMIN_GATEWAY_URL}}/gatcha/gatchas",
							"host": [
								"{{ADMIN_GATEWAY_URL}}"
							],
							"path": [
								"gatcha",
								"gatchas"
							]
						},
						"description": "I create a new gatcha by sending the information and the image, which will be uploaded to the bucket.\n\nI check if I can download the image."
					},
					"response": []
				},
				{
					"name": "image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test('Image content type is valid', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('image');",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "postman-cloud:///1efa9f59-fd03-49c0-a6cb-30fe484b839c"
								},
								{
									"key": "json",
									"value": "{\n    \"name\": \"Common Warrior\",\n    \"rarity\": \"comune\"\n}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{GATEWAY_URL}}/{{imageURL}}",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"{{imageURL}}"
							]
						},
						"description": "I create a new gatcha by sending the information and the image, which will be uploaded to the bucket.\n\nI check if I can download the image."
					},
					"response": []
				},
				{
					"name": "add gatcha raro",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// Store the _id from the response inside an environment variable \"gatcha_id\"",
									"pm.environment.set(\"gatcha_id\", pm.response.json().data._id);",
									"",
									"",
									"// Now we have to check if we can correctly download the image we just uploaded ",
									"// (it has been uploaded to a MinIO bucket)",
									"",
									"// Extracting the image URL from the response",
									"const imageURL = pm.response.json().data.image;",
									"pm.test('Check if response image URL is valid', function () {",
									"    pm.expect(pm.response.json().data.image).to.be.a('string').and.to.not.be.empty;",
									"});",
									"",
									"const completeImageURL = pm.environment.get(\"GATEWAY_URL\") + imageURL;",
									"",
									"console.log(\"You can check the content of the image at: \" + completeImageURL);",
									"",
									"// Sending a request to the image URL to check if it is appropriate",
									"pm.sendRequest({",
									"    url: completeImageURL,",
									"    method: 'GET',",
									"}, function (err, res) {",
									"    pm.test('Image request is successful', function () {",
									"        pm.expect(res).to.have.status(200);",
									"    });",
									"    pm.test('Image content type is valid', function () {",
									"        pm.expect(res.headers.get('Content-Type')).to.include('image');",
									"    });",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "postman-cloud:///1efa9f59-fd03-49c0-a6cb-30fe484b839c"
								},
								{
									"key": "json",
									"value": "{\n    \"name\": \"Common Warrior\",\n    \"rarity\": \"raro\"\n}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{ADMIN_GATEWAY_URL}}/gatcha/gatchas",
							"host": [
								"{{ADMIN_GATEWAY_URL}}"
							],
							"path": [
								"gatcha",
								"gatchas"
							]
						},
						"description": "I create a new gatcha by sending the information and the image, which will be uploaded to the bucket.\n\nI check if I can download the image."
					},
					"response": []
				},
				{
					"name": "add gatcha epico",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// Store the _id from the response inside an environment variable \"gatcha_id\"",
									"pm.environment.set(\"gatcha_id\", pm.response.json().data._id);",
									"",
									"",
									"// Now we have to check if we can correctly download the image we just uploaded ",
									"// (it has been uploaded to a MinIO bucket)",
									"",
									"// Extracting the image URL from the response",
									"const imageURL = pm.response.json().data.image;",
									"pm.test('Check if response image URL is valid', function () {",
									"    pm.expect(pm.response.json().data.image).to.be.a('string').and.to.not.be.empty;",
									"});",
									"",
									"const completeImageURL = pm.environment.get(\"GATEWAY_URL\") + imageURL;",
									"",
									"console.log(\"You can check the content of the image at: \" + completeImageURL);",
									"",
									"// Sending a request to the image URL to check if it is appropriate",
									"pm.sendRequest({",
									"    url: completeImageURL,",
									"    method: 'GET',",
									"}, function (err, res) {",
									"    pm.test('Image request is successful', function () {",
									"        pm.expect(res).to.have.status(200);",
									"    });",
									"    pm.test('Image content type is valid', function () {",
									"        pm.expect(res.headers.get('Content-Type')).to.include('image');",
									"    });",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "postman-cloud:///1efa9f59-fd03-49c0-a6cb-30fe484b839c"
								},
								{
									"key": "json",
									"value": "{\n    \"name\": \"Common Warrior\",\n    \"rarity\": \"epico\"\n}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{ADMIN_GATEWAY_URL}}/gatcha/gatchas",
							"host": [
								"{{ADMIN_GATEWAY_URL}}"
							],
							"path": [
								"gatcha",
								"gatchas"
							]
						},
						"description": "I create a new gatcha by sending the information and the image, which will be uploaded to the bucket.\n\nI check if I can download the image."
					},
					"response": []
				},
				{
					"name": "add gatcha leggendario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// Store the _id from the response inside an environment variable \"gatcha_id\"",
									"pm.environment.set(\"gatcha_id\", pm.response.json().data._id);",
									"",
									"",
									"// Now we have to check if we can correctly download the image we just uploaded ",
									"// (it has been uploaded to a MinIO bucket)",
									"",
									"// Extracting the image URL from the response",
									"const imageURL = pm.response.json().data.image;",
									"pm.test('Check if response image URL is valid', function () {",
									"    pm.expect(pm.response.json().data.image).to.be.a('string').and.to.not.be.empty;",
									"});",
									"",
									"const completeImageURL = pm.environment.get(\"GATEWAY_URL\") + imageURL;",
									"",
									"console.log(\"You can check the content of the image at: \" + completeImageURL);",
									"",
									"// Sending a request to the image URL to check if it is appropriate",
									"pm.sendRequest({",
									"    url: completeImageURL,",
									"    method: 'GET',",
									"}, function (err, res) {",
									"    pm.test('Image request is successful', function () {",
									"        pm.expect(res).to.have.status(200);",
									"    });",
									"    pm.test('Image content type is valid', function () {",
									"        pm.expect(res.headers.get('Content-Type')).to.include('image');",
									"    });",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "postman-cloud:///1efa9f59-fd03-49c0-a6cb-30fe484b839c"
								},
								{
									"key": "json",
									"value": "{\n    \"name\": \"Common Warrior\",\n    \"rarity\": \"leggendario\"\n}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{ADMIN_GATEWAY_URL}}/gatcha/gatchas",
							"host": [
								"{{ADMIN_GATEWAY_URL}}"
							],
							"path": [
								"gatcha",
								"gatchas"
							]
						},
						"description": "I create a new gatcha by sending the information and the image, which will be uploaded to the bucket.\n\nI check if I can download the image."
					},
					"response": []
				},
				{
					"name": "add another gatcha leggendario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// Store the _id from the response inside an environment variable \"gatcha_id\"",
									"pm.environment.set(\"gatcha_id\", pm.response.json().data._id);",
									"",
									"",
									"// Now we have to check if we can correctly download the image we just uploaded ",
									"// (it has been uploaded to a MinIO bucket)",
									"",
									"// Extracting the image URL from the response",
									"const imageURL = pm.response.json().data.image;",
									"pm.test('Check if response image URL is valid', function () {",
									"    pm.expect(pm.response.json().data.image).to.be.a('string').and.to.not.be.empty;",
									"});",
									"",
									"const completeImageURL = pm.environment.get(\"GATEWAY_URL\") + imageURL;",
									"",
									"console.log(\"You can check the content of the image at: \" + completeImageURL);",
									"",
									"// Sending a request to the image URL to check if it is appropriate",
									"pm.sendRequest({",
									"    url: completeImageURL,",
									"    method: 'GET',",
									"}, function (err, res) {",
									"    pm.test('Image request is successful', function () {",
									"        pm.expect(res).to.have.status(200);",
									"    });",
									"    pm.test('Image content type is valid', function () {",
									"        pm.expect(res.headers.get('Content-Type')).to.include('image');",
									"    });",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "postman-cloud:///1efa9f59-fd03-49c0-a6cb-30fe484b839c"
								},
								{
									"key": "json",
									"value": "{\n    \"name\": \"Common Warrior\",\n    \"rarity\": \"leggendario\"\n}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{ADMIN_GATEWAY_URL}}/gatcha/gatchas",
							"host": [
								"{{ADMIN_GATEWAY_URL}}"
							],
							"path": [
								"gatcha",
								"gatchas"
							]
						},
						"description": "I create a new gatcha by sending the information and the image, which will be uploaded to the bucket.\n\nI check if I can download the image."
					},
					"response": []
				},
				{
					"name": "get single gatcha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response body structure is valid\", function () {",
									"    var responseJSON = pm.response.json();",
									"    pm.expect(responseJSON).to.be.an('object').that.includes.keys('_id', 'image', 'name', 'rarity');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{GATEWAY_URL}}/gatcha/gatchas/{{gatcha_id}}",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"gatcha",
								"gatchas",
								"{{gatcha_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "edit a single gatcha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response body structure is valid\", function () {",
									"    var responseJSON = pm.response.json();",
									"    pm.expect(responseJSON.data).to.be.an('object').that.includes.keys('_id', 'image', 'name', 'rarity');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rarity\": \"9999\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{GATEWAY_URL}}/gatcha/gatchas/{{gatcha_id}}",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"gatcha",
								"gatchas",
								"{{gatcha_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all gatchas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response body structure is valid\", function () {",
									"    var responseJSON = pm.response.json();",
									"    pm.expect(responseJSON[1]).to.be.an('object').that.includes.keys('_id', 'image', 'name', 'rarity');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{GATEWAY_URL}}/gatcha/gatchas",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"gatcha",
								"gatchas"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete a gatcha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{ADMIN_GATEWAY_URL}}/gatcha/gatchas/{{gatcha_id}}",
							"host": [
								"{{ADMIN_GATEWAY_URL}}"
							],
							"path": [
								"gatcha",
								"gatchas",
								"{{gatcha_id}}"
							]
						},
						"description": "I create a new gatcha by sending the information and the image, which will be uploaded to the bucket.\n\nI check if I can download the image."
					},
					"response": []
				}
			]
		},
		{
			"name": "auth",
			"item": [
				{
					"name": "logout",
					"item": [
						{
							"name": "/auth/register - user_che_fa_logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Verify response status code is 200 or 400 and contains error message\", function () {",
											"    pm.expect(pm.response.code).to.satisfy((code) => {",
											"        return code === 200 || (code === 400 && pm.response.json().error === \"User already exists\");",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"user_che_fa_logout\",\n    \"password\": \"passwordissima\",\n    \"email\": \"user_che_fa_logout@test.org\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{GATEWAY_URL}}/auth/register",
									"host": [
										"{{GATEWAY_URL}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "/auth/login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"// va bene anche ",
											"pm.test(\"Response status code is 200 or 400\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
											"});",
											"",
											"pm.test(\"Save access token to variable\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"token\", jsonData.access_token);",
											"});",
											"",
											"pm.test(\"Save identity token to variable\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"identity_token\", jsonData.id_token);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"user_che_fa_logout\",\n    \"password\": \"passwordissima\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{GATEWAY_URL}}/auth/login",
									"host": [
										"{{GATEWAY_URL}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "introspect auth token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{GATEWAY_URL}}/auth/introspect",
									"host": [
										"{{GATEWAY_URL}}"
									],
									"path": [
										"auth",
										"introspect"
									]
								}
							},
							"response": []
						},
						{
							"name": "intrispect ID_token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "token",
											"value": "{{identity_token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{GATEWAY_URL}}/auth/introspect",
									"host": [
										"{{GATEWAY_URL}}"
									],
									"path": [
										"auth",
										"introspect"
									]
								}
							},
							"response": []
						},
						{
							"name": "revoke",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}} ",
										"type": "text"
									},
									{
										"key": "Identity",
										"value": "Bearer {{identity_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{GATEWAY_URL}}/auth/tokens/revoke",
									"host": [
										"{{GATEWAY_URL}}"
									],
									"path": [
										"auth",
										"tokens",
										"revoke"
									]
								}
							},
							"response": []
						},
						{
							"name": "introspect AFTER REVOKE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"});",
											"",
											"",
											"pm.test(\"The error message is 'Token revoked'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.equal(\"Token revoked\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{GATEWAY_URL}}/auth/introspect",
									"host": [
										"{{GATEWAY_URL}}"
									],
									"path": [
										"auth",
										"introspect"
									]
								}
							},
							"response": []
						},
						{
							"name": "introspect ID_TOKEN AFTER REVOKE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"});",
											"",
											"",
											"pm.test(\"The error message is 'Token revoked'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.equal(\"Token revoked\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "token",
											"value": "{{identity_token}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{GATEWAY_URL}}/auth/introspect",
									"host": [
										"{{GATEWAY_URL}}"
									],
									"path": [
										"auth",
										"introspect"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "register user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify response status code is 200 or 400 and contains error message\", function () {",
									"    pm.expect(pm.response.code).to.satisfy((code) => {",
									"        return code === 200 || (code === 400 && pm.response.json().error === \"User already exists\");",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser\",\n    \"password\": \"testpassword\",\n    \"email\": \"test@test.org\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{GATEWAY_URL}}/auth/register",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "login user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"// va bene anche ",
									"pm.test(\"Response status code is 200 or 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
									"});",
									"",
									"pm.test(\"Save access token to variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"token\", jsonData.access_token);",
									"});",
									"",
									"",
									"pm.test(\"Save identity token to variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"identity_token\", jsonData.id_token);",
									"});",
									"",
									"pm.test(\"Save user_id token to variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"user_id\", jsonData.userID);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser\",      \n    \"password\": \"testpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{GATEWAY_URL}}/auth/login",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "userinfo for an id token",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{GATEWAY_URL}}/auth/userinfo",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"auth",
								"userinfo"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all users from db",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0dXNlciIsImVtYWlsIjoidGVzdHVzZXJAZXhhbXBsZS5jb20iLCJyb2xlIjoibm9ybWFsVXNlciIsImV4cCI6MTczMjY1NjQ5M30.gAS9BPaFZU95iaIVdg1BCaFG494qM147uGPgPm9kge0",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{GATEWAY_URL}}/auth/debug/users",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"auth",
								"debug",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "introspect auth_token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{GATEWAY_URL}}/auth/introspect",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"auth",
								"introspect"
							]
						}
					},
					"response": []
				},
				{
					"name": "introspect id_token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "token",
									"value": "{{identity_token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{GATEWAY_URL}}/auth/introspect",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"auth",
								"introspect"
							]
						}
					},
					"response": []
				},
				{
					"name": "register - user2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify response status code is 200 or 400 and contains error message\", function () {",
									"    pm.expect(pm.response.code).to.satisfy((code) => {",
									"        return code === 200 || (code === 400 && pm.response.json().error === \"User already exists\");",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user2\",\n    \"password\": \"passwordissima\",\n    \"email\": \"user2@test.org\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{GATEWAY_URL}}/auth/register",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "login - user2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"// va bene anche ",
									"pm.test(\"Response status code is 200 or 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
									"});",
									"",
									"pm.test(\"Save access token to variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"token\", jsonData.access_token);",
									"});",
									"",
									"pm.test(\"Save identity token to variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"identity_token\", jsonData.id_token);",
									"});",
									"",
									"pm.test(\"Save user_id token to variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"user_id\", jsonData.userID);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user2\",\n    \"password\": \"passwordissima\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{GATEWAY_URL}}/auth/login",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "normaluseronly",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{GATEWAY_URL}}/auth/test/normaluseronly",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"auth",
								"test",
								"normaluseronly"
							]
						}
					},
					"response": []
				},
				{
					"name": "adminuseronly forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{GATEWAY_URL}}/auth/test/adminuseronly",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"auth",
								"test",
								"adminuseronly"
							]
						}
					},
					"response": []
				},
				{
					"name": "adminuseronly forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{GATEWAY_URL}}/auth/test/adminuseronly",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"auth",
								"test",
								"adminuseronly"
							]
						}
					},
					"response": []
				},
				{
					"name": "login - adminuser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Save access token to variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"token\", jsonData.access_token);",
									"});",
									"",
									"pm.test(\"Save identity token to variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"identity_token\", jsonData.id_token);",
									"});",
									"",
									"pm.test(\"Save user_id token to variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"user_id\", jsonData.userID);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"adminuser\",\n    \"password\": \"password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{GATEWAY_URL}}/auth/login",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "adminuseronly permitted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{GATEWAY_URL}}/auth/test/adminuseronly",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"auth",
								"test",
								"adminuseronly"
							]
						}
					},
					"response": []
				},
				{
					"name": "bothroles permitted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{GATEWAY_URL}}/auth/test/bothroles",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"auth",
								"test",
								"bothroles"
							]
						}
					},
					"response": []
				},
				{
					"name": "login - user2 again Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"// va bene anche ",
									"pm.test(\"Response status code is 200 or 400\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
									"});",
									"",
									"pm.test(\"Save access token to variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"token\", jsonData.access_token);",
									"});",
									"",
									"pm.test(\"Save identity token to variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"identity_token\", jsonData.id_token);",
									"});",
									"",
									"pm.test(\"Save user_id token to variable\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"user_id\", jsonData.userID);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"user2\",\n    \"password\": \"passwordissima\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{GATEWAY_URL}}/auth/login",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user microservice",
			"item": [
				{
					"name": "/user/checkconnection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{GATEWAY_URL}}/user/checkconnection",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"user",
								"checkconnection"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/getAll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{GATEWAY_URL}}/user/getAll",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"user",
								"getAll"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/get_user_from_name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{GATEWAY_URL}}/user/users/{{user_id}}",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"user",
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "increase balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userID\": \"{{user_id}}\",\n    \"amount\" : 500\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{GATEWAY_URL}}/user/increase_balance",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"user",
								"increase_balance"
							]
						}
					},
					"response": []
				},
				{
					"name": "decrease balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \n    \"userID\": \"{{user_id}}\",\n    \"amount\": 20\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{GATEWAY_URL}}/user/decrease_balance",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"user",
								"decrease_balance"
							]
						}
					},
					"response": []
				},
				{
					"name": "get balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{GATEWAY_URL}}/user/balance",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"user",
								"balance"
							]
						}
					},
					"response": []
				},
				{
					"name": "roll a gatcha",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response body structure is valid\", function () {",
									"    var responseJSON = pm.response.json();",
									"    pm.expect(responseJSON.gatcha).to.be.an('object').that.includes.keys('_id', 'image', 'name', 'rarity', 'NTot');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{GATEWAY_URL}}/gatcha/roll",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"gatcha",
								"roll"
							]
						}
					},
					"response": []
				},
				{
					"name": "get collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 when collection is retrieved\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains the user's collection\", function () {",
									"    let jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.be.an('array'); // Assuming 'collection' is an array",
									"});",
									"",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); // Expect response under 1 second",
									"});",
									"",
									"pm.test(\"Error on invalid token\", function () {",
									"    if (pm.response.code === 401) {",
									"        let jsonResponse = pm.response.json();",
									"        pm.expect(jsonResponse.error).to.eql(\"Error decoding token\");",
									"    }",
									"});",
									"",
									"pm.test(\"Error on user not found\", function () {",
									"    if (pm.response.code === 404) {",
									"        let jsonResponse = pm.response.json();",
									"        pm.expect(jsonResponse.error).to.eql(\"User not found\");",
									"    }",
									"});",
									"",
									"pm.test(\"Server handles unexpected errors gracefully\", function () {",
									"    if (pm.response.code === 500) {",
									"        let jsonResponse = pm.response.json();",
									"        pm.expect(jsonResponse).to.have.property(\"error\");",
									"    }",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{GATEWAY_URL}}/user/collection",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"user",
								"collection"
							]
						}
					},
					"response": []
				},
				{
					"name": "get transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 when transactions are retrieved\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains the user's transactions\", function () {",
									"    let jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.be.an('array'); // Assuming transactions is an array",
									"});",
									"",
									"pm.test(\"Error on invalid token\", function () {",
									"    if (pm.response.code === 401) {",
									"        let jsonResponse = pm.response.json();",
									"        pm.expect(jsonResponse.error).to.eql(\"Error decoding token\");",
									"    }",
									"});",
									"",
									"pm.test(\"Error on user not found\", function () {",
									"    if (pm.response.code === 404) {",
									"        let jsonResponse = pm.response.json();",
									"        pm.expect(jsonResponse.error).to.eql(\"User not found\");",
									"    }",
									"});",
									"",
									"pm.test(\"Server handles unexpected errors gracefully\", function () {",
									"    if (pm.response.code === 500) {",
									"        let jsonResponse = pm.response.json();",
									"        pm.expect(jsonResponse).to.have.property(\"error\");",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{GATEWAY_URL}}/user/transactions",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"user",
								"transactions"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "market microservice",
			"item": [
				{
					"name": "/market/checkconnection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{GATEWAY_URL}}/market/checkconnection",
							"host": [
								"{{GATEWAY_URL}}"
							],
							"path": [
								"market",
								"checkconnection"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "gateway root",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"// Test the response body structure",
							"pm.test(\"JSON response says that the gateway is running\", function () {",
							"    // Parse the response JSON",
							"    var jsonData = pm.response.json();",
							"    ",
							"    // Check that the response matches the expected object",
							"    pm.expect(jsonData).to.eql({\"message\": \"API Gateway is running\"});",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{GATEWAY_URL}}/",
					"host": [
						"{{GATEWAY_URL}}"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "imageURL",
			"value": ""
		}
	]
}